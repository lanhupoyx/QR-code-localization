// Generated by gencpp from file xmover_msgs/BasicState.msg
// DO NOT EDIT!


#ifndef XMOVER_MSGS_MESSAGE_BASICSTATE_H
#define XMOVER_MSGS_MESSAGE_BASICSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xmover_msgs
{
template <class ContainerAllocator>
struct BasicState_
{
  typedef BasicState_<ContainerAllocator> Type;

  BasicState_()
    : battery(0)
    , handle(false)
    , eStop(false)
    , hitBar(false)
    , fork(false)  {
    }
  BasicState_(const ContainerAllocator& _alloc)
    : battery(0)
    , handle(false)
    , eStop(false)
    , hitBar(false)
    , fork(false)  {
  (void)_alloc;
    }



   typedef uint8_t _battery_type;
  _battery_type battery;

   typedef uint8_t _handle_type;
  _handle_type handle;

   typedef uint8_t _eStop_type;
  _eStop_type eStop;

   typedef uint8_t _hitBar_type;
  _hitBar_type hitBar;

   typedef uint8_t _fork_type;
  _fork_type fork;





  typedef boost::shared_ptr< ::xmover_msgs::BasicState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xmover_msgs::BasicState_<ContainerAllocator> const> ConstPtr;

}; // struct BasicState_

typedef ::xmover_msgs::BasicState_<std::allocator<void> > BasicState;

typedef boost::shared_ptr< ::xmover_msgs::BasicState > BasicStatePtr;
typedef boost::shared_ptr< ::xmover_msgs::BasicState const> BasicStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xmover_msgs::BasicState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xmover_msgs::BasicState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xmover_msgs::BasicState_<ContainerAllocator1> & lhs, const ::xmover_msgs::BasicState_<ContainerAllocator2> & rhs)
{
  return lhs.battery == rhs.battery &&
    lhs.handle == rhs.handle &&
    lhs.eStop == rhs.eStop &&
    lhs.hitBar == rhs.hitBar &&
    lhs.fork == rhs.fork;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xmover_msgs::BasicState_<ContainerAllocator1> & lhs, const ::xmover_msgs::BasicState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xmover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::xmover_msgs::BasicState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xmover_msgs::BasicState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xmover_msgs::BasicState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xmover_msgs::BasicState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xmover_msgs::BasicState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xmover_msgs::BasicState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xmover_msgs::BasicState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b51a67a8cd630f369dc312d92915270";
  }

  static const char* value(const ::xmover_msgs::BasicState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b51a67a8cd630f3ULL;
  static const uint64_t static_value2 = 0x69dc312d92915270ULL;
};

template<class ContainerAllocator>
struct DataType< ::xmover_msgs::BasicState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xmover_msgs/BasicState";
  }

  static const char* value(const ::xmover_msgs::BasicState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xmover_msgs::BasicState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 battery      #电量百分比\n"
"bool  handle       #手柄状态，ture是手动模式\n"
"bool  eStop        #急停开关状态，ture是触发状态\n"
"bool  hitBar       #防撞条状态，ture是触发状态\n"
"bool  fork         #插齿状态，ture是上举状态\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::xmover_msgs::BasicState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xmover_msgs::BasicState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery);
      stream.next(m.handle);
      stream.next(m.eStop);
      stream.next(m.hitBar);
      stream.next(m.fork);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BasicState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xmover_msgs::BasicState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xmover_msgs::BasicState_<ContainerAllocator>& v)
  {
    s << indent << "battery: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery);
    s << indent << "handle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.handle);
    s << indent << "eStop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.eStop);
    s << indent << "hitBar: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hitBar);
    s << indent << "fork: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fork);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XMOVER_MSGS_MESSAGE_BASICSTATE_H



// ^Czl@xqe-144:~$ rostopic info /xmover_basic_state
// Type: xmover_msgs/BasicState

// Publishers: 
//  * /ep_can_driver_node (http://xqe-144:44155/)

// Subscribers: 
//  * /saveBag (http://xqe-144:37413/)
//  * /stacking (http://xqe-144:46307/)
//  * /path_following (http://xqe-144:34137/)
//  * /epMonitorService (http://xqe-144:41463/)
//  * /xpui (http://xqe-144:34333/)
