// Generated by gencpp from file ep_qrcode_loc/LocCamera.msg
// DO NOT EDIT!


#ifndef EP_QRCODE_LOC_MESSAGE_LOCCAMERA_H
#define EP_QRCODE_LOC_MESSAGE_LOCCAMERA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ep_qrcode_loc
{
template <class ContainerAllocator>
struct LocCamera_
{
  typedef LocCamera_<ContainerAllocator> Type;

  LocCamera_()
    : stamp()
    , sender()
    , hex()
    , head()
    , sum()
    , index(0)
    , duration(0.0)
    , code(0)
    , error_x(0.0)
    , error_y(0.0)
    , error_yaw(0.0)
    , is_decode(false)
    , is_accurate_loc(false)
    , is_broad_loc(false)  {
    }
  LocCamera_(const ContainerAllocator& _alloc)
    : stamp()
    , sender(_alloc)
    , hex(_alloc)
    , head(_alloc)
    , sum(_alloc)
    , index(0)
    , duration(0.0)
    , code(0)
    , error_x(0.0)
    , error_y(0.0)
    , error_yaw(0.0)
    , is_decode(false)
    , is_accurate_loc(false)
    , is_broad_loc(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sender_type;
  _sender_type sender;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _hex_type;
  _hex_type hex;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _head_type;
  _head_type head;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sum_type;
  _sum_type sum;

   typedef uint32_t _index_type;
  _index_type index;

   typedef double _duration_type;
  _duration_type duration;

   typedef uint32_t _code_type;
  _code_type code;

   typedef double _error_x_type;
  _error_x_type error_x;

   typedef double _error_y_type;
  _error_y_type error_y;

   typedef double _error_yaw_type;
  _error_yaw_type error_yaw;

   typedef uint8_t _is_decode_type;
  _is_decode_type is_decode;

   typedef uint8_t _is_accurate_loc_type;
  _is_accurate_loc_type is_accurate_loc;

   typedef uint8_t _is_broad_loc_type;
  _is_broad_loc_type is_broad_loc;





  typedef boost::shared_ptr< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> const> ConstPtr;

}; // struct LocCamera_

typedef ::ep_qrcode_loc::LocCamera_<std::allocator<void> > LocCamera;

typedef boost::shared_ptr< ::ep_qrcode_loc::LocCamera > LocCameraPtr;
typedef boost::shared_ptr< ::ep_qrcode_loc::LocCamera const> LocCameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ep_qrcode_loc::LocCamera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ep_qrcode_loc::LocCamera_<ContainerAllocator1> & lhs, const ::ep_qrcode_loc::LocCamera_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.sender == rhs.sender &&
    lhs.hex == rhs.hex &&
    lhs.head == rhs.head &&
    lhs.sum == rhs.sum &&
    lhs.index == rhs.index &&
    lhs.duration == rhs.duration &&
    lhs.code == rhs.code &&
    lhs.error_x == rhs.error_x &&
    lhs.error_y == rhs.error_y &&
    lhs.error_yaw == rhs.error_yaw &&
    lhs.is_decode == rhs.is_decode &&
    lhs.is_accurate_loc == rhs.is_accurate_loc &&
    lhs.is_broad_loc == rhs.is_broad_loc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ep_qrcode_loc::LocCamera_<ContainerAllocator1> & lhs, const ::ep_qrcode_loc::LocCamera_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ep_qrcode_loc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b572640966fd882205a439970453d98";
  }

  static const char* value(const ::ep_qrcode_loc::LocCamera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b572640966fd882ULL;
  static const uint64_t static_value2 = 0x205a439970453d98ULL;
};

template<class ContainerAllocator>
struct DataType< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ep_qrcode_loc/LocCamera";
  }

  static const char* value(const ::ep_qrcode_loc::LocCamera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp    # 时间辍\n"
"string sender # 相机IP\n"
"string hex    # 数据帧内容（16进制）\n"
"string head   # 帧头\n"
"string sum    # 字节校验和\n"
"uint32 index     # 序号\n"
"float64 duration    # 算法耗时\n"
"\n"
"uint32 code    # 二维码编号\n"
"float64 error_x   # 中心坐标x\n"
"float64 error_y   # 中心坐标y\n"
"float64 error_yaw # 中心yaw\n"
"\n"
"bool is_decode       # 是否译码成功\n"
"bool is_accurate_loc # 是否精准定位成功\n"
"bool is_broad_loc    # 是否粗定位成功\n"
;
  }

  static const char* value(const ::ep_qrcode_loc::LocCamera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.sender);
      stream.next(m.hex);
      stream.next(m.head);
      stream.next(m.sum);
      stream.next(m.index);
      stream.next(m.duration);
      stream.next(m.code);
      stream.next(m.error_x);
      stream.next(m.error_y);
      stream.next(m.error_yaw);
      stream.next(m.is_decode);
      stream.next(m.is_accurate_loc);
      stream.next(m.is_broad_loc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocCamera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ep_qrcode_loc::LocCamera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ep_qrcode_loc::LocCamera_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "sender: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sender);
    s << indent << "hex: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.hex);
    s << indent << "head: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.head);
    s << indent << "sum: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sum);
    s << indent << "index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.index);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.code);
    s << indent << "error_x: ";
    Printer<double>::stream(s, indent + "  ", v.error_x);
    s << indent << "error_y: ";
    Printer<double>::stream(s, indent + "  ", v.error_y);
    s << indent << "error_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.error_yaw);
    s << indent << "is_decode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_decode);
    s << indent << "is_accurate_loc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_accurate_loc);
    s << indent << "is_broad_loc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_broad_loc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EP_QRCODE_LOC_MESSAGE_LOCCAMERA_H
